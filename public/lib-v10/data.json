[{"name": "card-game.py", "content": "\n### Card Game\n\n```py\n\nimport random\n\n# Concat function combines\n# elements of two lists\n\n\ndef concat(x, y):\n    i = 0\n    n = 0\n    z = []\n    while i < len(x):\n        z.append(x[i])\n        i += 1\n    while n < len(y):\n        z.append(y[n])\n        n += 1\n    return z\n\n\n# Join each element of\n# first list to every\n# element of second list\n# ex:- ['a', 'b'] x ['1', '2']\n# = ['a1', 'a2', 'b1', 'b2']\n\n\ndef crossJoin(x, y):\n    i = 0\n    z = []\n    while i < len(x):\n        n = 0\n        while n < len(y):\n            z.append(x[i]+y[n])\n            n += 1\n        i += 1\n    return z\n\n# deckCard generates a list of deck cards\n\n\ndef deckCard():\n    c = concat([\"ace\", \"king\", \"queen\", \"jack\"], [\n               \"2\", \"3\", \"4\",\n               \"5\", \"6\", \"7\",\n               \"8\", \"9\", \"10\"])\n    res = crossJoin([\n        \"heart-\u2665-\",\n        \"spade-\u2660-\",\n        \"diamond-\u2666-\",\n        \"club-\u2663-\"], c)\n    return res\n\n# shuffle function shuffles the cards\n\ndef shuffle(x):\n    i = 0\n    while i < len(x):\n        c = random.randint(0, len(x)-1)\n        d = x[i]\n        x[i] = x[c]\n        x[c] = d\n        i += 1\n    return x\n\n# Azma luck azma\n\ndef gambling(x, y):\n    c = random.randint(0, len(x)-1)\n    if(y in x[c]):\n        return \"u won\"\n    else:\n        return \"u loose\"\n\n# gives the probability by matching given cards in list\ndef probability(x, y):\n    z = 0\n    n = 0\n    while n < len(x):\n        i = 0\n        while i < len(y):\n            if(y[i] in x[n]):\n                z += 1\n                break\n            i += 1\n        n += 1\n    return z\n\n\nprint('deckCard-start')\nde = deckCard()\nprint(de)\nprint('deckCard-end')\nprint('shuffle-start')\nshuffle(de)\nprint(de)\nprint('shuffle-end')\nprint('gambling-start')\nprint(gambling(de, 'heart'))\nprint(gambling(de, 'king'))\nprint(gambling(de, 'ace'))\nprint('gambling-end')\nprint('probability-start')\nprint(probability(de, ['heart', 'brick']))\nprint(probability(de, ['king', 'jack']))\nprint('probability-end')\n\n\n```\n"}, {"name": "factorial.py", "content": "\n### Factorials\n\n```py\n\nfrom functools import reduce\n\n# returns factorial\n\n\ndef factorial(x):\n    res = 1\n    while x >= 1:\n        res = res*x\n        x -= 1\n    return res\n\n\nprint(factorial(10))\n# 362880\n```\n##### Factorials Using Recursive Function\n```py\ndef factorialR(x):\n    if x != 1:\n        return x*factorialR(x-1)\n    else:\n        return 1\n\nprint(factorialR(10))\n# 3628800\n\n```\n##### One liner using reduce and lambda\n```py\ndef factorialO(x):\n    return reduce(lambda a, b: a*b, range(1, x+1), 1)\n\nprint(factorialO(10))\n# 3628800\n\n```\n"}, {"name": "fibonacci.py", "content": "\n### Fibonacci\n\n```py\n\n\ndef fib(x):\n    i = 1\n    tmp = 0\n    a = 0\n    b = 1\n    print(a)\n    print(b)\n    while i <= x-2:\n        tmp = b\n        b = a + b\n        a = tmp\n        print(b)\n        i += 1\n\n\nfib(10)\n# 0\n# 1\n# 1\n# 2\n# 3\n# 5\n# 8\n# 13\n# 21\n# 34\n# 55\n\n```"}, {"name": "field-along-charge.py", "content": "\n### Electric Field Along A Sphere\n\n```py\n\nimport math\n\n# calculates electric field along a sphere\n\ndef eField(sigma, R, r):\n    epsilon = 8.85e-12\n    e = 0\n    if r > R:\n        e = (sigma/(4*math.pi*epsilon))*(R/r)**2\n    elif r == R:\n        e = sigma/epsilon\n    return e\n\n\nprint(eField(5e-6, 6, 6))\n# 564971.7514124294\nprint(eField(5e-6, 6, 5))\n# 0\nprint(eField(5e-6, 6, 9))\n# 19981.788209905255\n\n```"}, {"name": "inner-text.py", "content": "### Text **Extraction** <span style=\"font-size:10px\">must watch</span>\n##### An **innerText** function\nwhich gives content beteween two substring\n\n```py\n\ngreet = \"Welcome to KodeNoteBook.web.app\"\n\ndef innerText(x, y, z):\n    return \"\" if y not in x else x[x.find(y)+len(y):x.find(z)]\n\nprint(innerText(greet, 'Wel', 'Note'))\n# come to Kode\n\n```\n\n##### An **outerText** function\nwhich gives content beteween two substring including substring\n\n```py\ndef outerText(x, y, z):\n    return \"\" if y not in x else x[x.find(y):x.find(z)+len(z)]\n\nprint(outerText(greet, 'Wel', 'Note'))\n# Welcome to KodeNote\n\n```\n\n"}, {"name": "is-even.py", "content": "\n### Even Numbers\n\n```py\n\n# check the given no. is even no. or not\n\ndef isEven(x): return x % 2 == 0\n\n\nprint(isEven(4))\n# True\nprint(isEven(3))\n# False\n\n# filter even no. from list of numbers\n\ndef filterEven(x):\n    res = []\n    for i in x:\n        if isEven(i):\n            res.append(i)\n    return res\n\n\nprint(filterEven(range(5, 11)))\n# [6, 8, 10]\n\n\nprint(filterEven(range(2, 9)))\n# [2, 4, 6, 8]\n\n# oneline function for list of even no.from given range\ndef even(x): return list(filter(isEven, x))\n\n\nprint(even(range(30, 35)))\n# [30, 32, 34]\n\n```"}, {"name": "is-prime.py", "content": "\n### Prime Numbers\n\n```py\n\nimport math\n\n\ndef isPrime(x):\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    l = int(math.sqrt(x))\n    if x % l == 0:\n        return False\n    i = 3\n    while i <= l:\n        if x % i == 0:\n            return False\n        i += 2\n    return True\n\n```"}, {"name": "join-list.py", "content": "### List Join\na function to join list of strings\n\n```py\n# join with takes ',' as default param\ndef join(ar, joinWith=\",\"):\n    res = \"\"\n    for i in range(0, len(ar)-1):\n        res += ar[i]+joinWith\n    return res+ar[-1]\n\n\nprint(join(['kode', 'note', 'book']))\n# kode,note,book\nprint(join(['kode', 'note', 'book'], '-'))\n# kode-note-book\n\n```"}, {"name": "list-sum.py", "content": "\n### List Sum\n\n```py\n\nfrom functools import reduce\n\n\n# sum of all parameters\ndef sumAll(*x):\n    res = 0\n    for a in x:\n        res += a\n    return res\n\n\nprint(sumAll(2, 3, 4, 5))\n# 14\n\n\n# sum of no. of given list\ndef listSum(x):\n    res = 0\n    for i in x:\n        res += i\n    return res\n\n\nprint(listSum([2, 3, 4, 5]))\n# 14\n\n\n# One liner using reduce and lambda\ndef listSumO(x): return reduce(lambda a, b: a+b, x, 0)\n\n\nprint(listSumO(range(1, 11)))\n# 55\n\n```\n"}, {"name": "lists-sum.py", "content": "\n### Lists sum\n\n```py\n\n# takes 2 list and sum all corresponding no.\n\ndef listsSum(x, y):\n    res = []\n    for i in range(0, len(x)):\n        res.append(x[i]+y[i])\n    return res\n\n\nprint(listsSum([2, 3, 5], [3, 2, 1]))\n# [5, 5, 6]\n\n```"}, {"name": "table-in-js.js", "content": "### Table In JavaScript\n\n```js\n\nfunction Table(x) {\n    const res = [];\n    for (let i = x; i <= x * 10; i += x) {\n        res.push(i);\n    }\n    return res;\n}\nconsole.log(Table(5));\n\n// [\n//     5, 10, 15, 20, 25,\n//    30, 35, 40, 45, 50\n//  ]\n\nconst table = (x) =>\n    Array(10)\n        .fill(0)\n        .map((v, i) => (1 + i) * x);\n\nconsole.log(table(9));\n// [\n//     9, 18, 27, 36, 45,\n//    54, 63, 72, 81, 90\n//  ]\n\n```\n"}, {"name": "table.py", "content": "\n### Table Generator\n\n```py\n\ndef table(x):\n    res = []\n    for i in range(1, 11):\n        res.append(x*i)\n    return res\n\n\nprint(table(5))\n# [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n# oneliners style\ndef table(x): return list(range(x, 10*x+1, x))\n\n\nprint(table(5))\n\n```\n"}]